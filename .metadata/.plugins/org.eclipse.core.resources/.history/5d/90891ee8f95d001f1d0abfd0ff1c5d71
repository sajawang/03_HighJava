package kr.or.ddit.basic;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

import kr.or.ddit.util.DBUtil;

/*
 * 회원을 관리하는 프로그램을 작성하시오.(MYMEMBER 테이블 이용)
 * 
 * 	아래의 메뉴의 기능을 모두 구현하시오.(CRUD 기능 구현하기)
 * 메뉴 예시)
 * 	==작업 선택==
 *  1.자료 추가 -->insert-c
 *  2.자료 삭제 -->delete-d
 * 3.자료 수정 -->update-u
 * 4.전체 자료 출력 -->select-r
 * 0.작업 끝...
 * =========
 * 
 * 조건)
 * 1. 자료 추가에서 '회원ID'는 중복되지 않는다. (중복되면 다시 입력 받는다.)
 * 2. 자료 삭제에서는 '회원ID'를 입력받아서 처리한다.
 * 3. 자료 수정에서 '회원ID'는 변경되지 않는다. 
 * 
 */
public class JdbcTest07 {
	
	private Scanner scan = new Scanner(System.in);
	
	Connection conn = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	
	
	public static void main(String[] args) {
		new JdbcTest07().testStart();
	}

	private void testStart() {
		
		
		while(true) {
			int choice = displayMenu();
			switch(choice) {
			case 1: //추가
				insert();
				break;
			case 2: //삭제
				delete();
				break;
			case 3: //수정
				update();
				break;
			case 4: //전체자료 출력
				displayAll();
				break;
			case 0: //종룔
				System.out.println("작업 끝..");
				break;
			default:
				System.out.println("번호를 잘못입력했습니다");
				System.out.println("다시선택하세요");
			}
		}
	}

	private void displayAll() {
		try {
			conn=DBUtil.getConnection();
			
			String sql="select * from mymember";
			pstmt = conn.prepareStatement(sql);
			
			/*
			 * pstmt.executeQuery() -> 검색하는 SQL을 실행한다.(SELECT 구문 같은) 
			 * pstmt.executeUpdate() -> 데이터베이스를 modify(수정)할때 사용(insert,update,delete) 
			 */
			rs = pstmt.executeQuery();
			
			System.out.println();
			System.out.println("\t===검색결과===");
			System.out.println("아이디\t비밀번호\t이름\t전화번호\t주소");
			System.out.println("-----------------------------");
			while(rs.next()) {
				String id = rs.getString("mem_id");
				String pa = rs.getNString("mem_pass");
				String name = rs.getString("mem_name");
				String tel = rs.getNString("mem_tel");
				String addr = rs.getNString("mem_addr");
				
				System.out.println(id+"\t"+pa+"\t"+name+"t"+tel+"\t"+addr);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try { if(rs != null) rs.close(); } catch (SQLException e) {}
			try { if(pstmt != null) pstmt.close(); } catch (SQLException e) {}
			try { if(conn != null) conn.close(); } catch (SQLException e) {}
		}
		
		
	}

	private void update() {
	    System.out.println("수정할 아이디를 입력>>");
	    String id = scan.next();

	    System.out.println("패스워드>>");
	    String pa = scan.next();

	    System.out.println("이름>> ");
	    String name = scan.next();
	    
	    System.out.println("전화번호>>");
	    String tel = scan.next();
	    
	    System.out.println("주소>>");
	    String addr = scan.next();
	    
	    try {
	        conn = DBUtil.getConnection();
	        
	        String sql = "UPDATE mymember SET mem_pass = ?, mem_name = ?, mem_tel = ?, mem_addr = ? WHERE mem_id = ?";
	        pstmt = conn.prepareStatement(sql);
	        pstmt.setString(1, pa);
	        pstmt.setString(2, name);
	        pstmt.setString(3, tel);
	        pstmt.setString(4, addr);
	        pstmt.setString(5, id);
	        
	        int cnt = pstmt.executeUpdate();
	        
	        if (cnt > 0) {
	            System.out.println("수정 작업 성공!");
	        } else {
	            System.out.println("수정 작업 실패!");
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    } finally {
	        try { if (rs != null) rs.close(); } catch (SQLException e) {}
	        try { if (pstmt != null) pstmt.close(); } catch (SQLException e) {}
	        try { if (conn != null) conn.close(); } catch (SQLException e) {}
	    }
	}


	private void delete() {
		System.out.println("삭제할 아이디를 입력>>");
		String id = scan.next();
		
		try {
			conn=DBUtil.getConnection();
			
			String sql="delete from mymember where mem_id=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, id);
			
			int cnt = pstmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try { if(rs != null) rs.close(); } catch (SQLException e) {}
			try { if(pstmt != null) pstmt.close(); } catch (SQLException e) {}
			try { if(conn != null) conn.close(); } catch (SQLException e) {}
		}
		
	}

	private void insert() {
		
		
		System.out.println("아이디>>");
		String id =scan.next();
		
		System.out.println("패스워드>>");
		String pa = scan.next();

		System.out.println("이름>> ");
		String name = scan.next();
		
		System.out.println("전화번호>>");
		String tel = scan.next();
		
		System.out.println("주소>>");
		String addr = scan.next();
		
		try {
			conn=DBUtil.getConnection();
			
			String sql="insert into mymember values(?,?,?,?,?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setNString(1, id);
			pstmt.setNString(2, pa);
			pstmt.setNString(3, name);
			pstmt.setNString(4, tel);
			pstmt.setNString(5, addr);
			
			int cnt = pstmt.executeUpdate();
			
			if(cnt>0) {
				System.out.println("추가작업성공");
			} else {
				System.out.println("추가작업 실패!");
		}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try { if(rs != null) rs.close(); } catch (SQLException e) {}
			try { if(pstmt != null) pstmt.close(); } catch (SQLException e) {}
			try { if(conn != null) conn.close(); } catch (SQLException e) {}
		}
	}

	private int displayMenu() {
		System.out.println("==작업==");
		System.out.println("1.추가");
		System.out.println("2.삭제");
		System.out.println("3.수정");
		System.out.println("4.전체자료출력");
		System.out.println("0.종료");
		System.out.println("번호입력");
		
		return scan.nextInt();
	}

}































