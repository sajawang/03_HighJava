package kr.or.ddit.basic;

import java.io.IOException;
import java.io.InputStream;
import java.util.Scanner;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import kr.or.ddit.vo.LprodVO;

// MyBatis를 사용하여 DB자료를 처리하는 순서 및 방법 예제
public class LprodMybatisTest {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		
		// 1. MyBatis의 환경 설정 파일(mybatis-config.xml)을 읽어와서 그 내용을 처리한 후
		// 	  처리된 결과를 갖는 SqlSessionFactory객체를 생성한다.
		
		InputStream in = null;  // 스트림 객체 변수 선언
		SqlSessionFactory sqlSessionFactory = null;  // SqlSessionFactory객체 변수 선언
		
		try {
			// 1-1. 환경 설정 파일을 읽어 올 스트림 객체를 생성한다.
			in = Resources.getResourceAsStream("kr/or/ddit/mybatis/config/mybatis-config.xml");
			
			// 1-2. 환결 설정 파일을 읽어와 환경 설정 작업을 수행하고 작업이 완료되면 SqlSessionFactory객체를 생성한다.
			sqlSessionFactory = new SqlSessionFactoryBuilder().build(in);
		} catch (Exception e) {
			System.out.println("MyBatis 초기화 실패!!!");
			e.printStackTrace();
		} finally {
			if(in!=null) try { in.close(); }catch(IOException e) {}
		}
		
		//-----------------------------------------------------------------------------
		
		// 2. mapper에 등록된 SQL문 중 실행할 SQL문을 호출해서 실행하여 원하는 작업을 수행한다.
		
		// 2-1. insert 작업
		System.out.println("insert 작업 시작...");
		
		System.out.print("Lprod_id 입력 >> ");
		int lprodId = scan.nextInt();
		
		System.out.print("Lprod_gu 입력 >> ");
		String lprodGu = scan.next();
		
		System.out.print("Lprod_nm 입력 >> ");
		String lprodNm = scan.next();
		
		// insert할 데이터들을 VO객체에 저장한다.
		LprodVO lvo = new LprodVO();
		lvo.setLprod_id(lprodId);
		lvo.setLprod_gu(lprodGu);
		lvo.setLprod_nm(lprodNm);
		
		SqlSession session = null;   
		try {
			// SQL문을 호출해서 실행할 수 있는 SqlSession객체를 생성한다.
			// ==> SqlSessionFactory객체의  openSession()메서드를 이용한다.
			// 형식) SqlSessionFactory객체.openSession(논리값)
			//			==> '논리값'이 true이면 AutoCommit이 활성화된 상태로 생성되고
			//				'논리값'이 false이거나 생략되면 AutoCommit이 비활성화된 상태로 생성된다.
			session = sqlSessionFactory.openSession();
			
			
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		
		

	}

}




































